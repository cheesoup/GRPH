<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://0.0.0.0:4000/GRPH/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://0.0.0.0:4000/GRPH/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/GRPH/" rel="alternate" type="text/html" /><updated>2021-11-26T23:33:30-05:00</updated><id>http://0.0.0.0:4000/GRPH/feed.xml</id><title type="html">thesis? idk?</title><subtitle>a blog for 4th year workshop at OCADU</subtitle><author><name>Chris Carin</name></author><entry><title type="html">The Web is Obese</title><link href="http://0.0.0.0:4000/GRPH/website/2021/11/20/the-web-is-obese.html" rel="alternate" type="text/html" title="The Web is Obese" /><published>2021-11-20T00:00:00-05:00</published><updated>2021-11-20T00:00:00-05:00</updated><id>http://0.0.0.0:4000/GRPH/website/2021/11/20/the-web-is-obese</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/website/2021/11/20/the-web-is-obese.html">&lt;p&gt;Despite what minimalist trends prevalent throughout the tech industries may have
you believe, today’s modern web is very bloated. Just &lt;a href=&quot;https://www.wired.com/2016/04/average-webpage-now-size-original-doom/&quot;&gt;5 years
ago&lt;/a&gt;, the
average web page was already larger than the original DOOM for MS-DOS. In
reaction to this, I choose to design this blog to be as lightweight and easy to
load as possible. I remember times back in High School where my computer could
barely handle 3 or 4 tabs of Chrome or Firefox. It was awful. Since then, modern
web browsers have implemented a plethora of new features and in turn have become
potentially bigger resource hogs. And just as they do, designers While these
features provide a lot of creative of power to web designers, it’s part of the
designer’s job to wield these powers appropriately.&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float &quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-nocss-frontpage-png&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/nocss_frontpage.png&quot; alt=&quot;What a
software minimal website does look like&quot; style=&quot;width: &quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;What a
software minimal website does look like&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-nocss-frontpage-png&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/nocss_frontpage.png&quot; alt=&quot;What a
software minimal website does look like&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Just to be clear, I’m not claiming page weight and efficiency always need to be
prioritized over other aspects of page design. If we were to prioritize software
minimalism over all other things, most sites on the web would probably look like
&lt;a href=&quot;https://nocss.club/&quot;&gt;this&lt;/a&gt;. If that is the internet you prefer, you’re probably
be better off switching to the &lt;a href=&quot;http://gopher.quux.org:70/&quot;&gt;gopher protocol&lt;/a&gt; or
something. There are also plenty of in browser scenarios that require access to
advance scripting functionalities. Full office suites like Google Docs wouldn’t
exist without such things.&lt;/p&gt;

&lt;p&gt;I’m suggesting there is a balance that needs to be respected when it comes
designing for content on the modern web. Just because we can do something fancy
and resource expensive, doesn’t mean we always should. If we think of page on
the web as small pieces of software, the content would be the main process of
application. The content is the main reason why any given visitor is on any
given web page. It is what the user is attempting to execute when they visit. By
bloating up the interface to this process, a designer runs the risk needlessly
increasing the number of resources required to load and display the content. Not
only does this make content harder to access for certain users (particularly
those on mobile and lower end devices), but it also increases a page’s
environmental footprint.&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float &quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-ocadu-frontpage-png&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/ocadu_frontpage.png&quot; alt=&quot;What a
software minimal website does not look like&quot; style=&quot;width: &quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;What a
software minimal website does not look like&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-ocadu-frontpage-png&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/ocadu_frontpage.png&quot; alt=&quot;What a
software minimal website does not look like&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Let’s look at &lt;a href=&quot;https://ocadu.ca/&quot;&gt;OCADU’s home page&lt;/a&gt; for example. I noticed it
features a video which automatically loads up every time someone visits it. To
me, this is already a problem. While the use of videos as splash elements have
become more popular on today’s web, it is a I trend that I heavily disagree
with. Landing pages are meant to be quick, flexible, and easy to navigate. They
need to be because they are literally the index of the rest of the website.
Embedded videos are the opposite of these characteristics. They are large, slow,
and often break at different resolutions.&lt;/p&gt;

&lt;p&gt;Below is part of the results provided by &lt;a href=&quot;https://tools.pingdom.com/&quot;&gt;Pingdom’s speed
tool&lt;/a&gt;:&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float &quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-ocadu-size-png&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/ocadu_size.png&quot; alt=&quot;Size of OCADs front
page, sorted by file type&quot; style=&quot;width: &quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Size of OCADs front
page, sorted by file type&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-ocadu-size-png&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/ocadu_size.png&quot; alt=&quot;Size of OCADs front
page, sorted by file type&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;As we can see above, OCAD’s front page is over 20MB. And of course, most of that
weight is the video the school decided to embed. If I were bandwidth limited or
data capped, opening this home page would eat a significant chunk of my
available transfer for the month. Furthermore, if I were to access this page
from an older computer, it would probably take up the entirety of the computer’s
processing power just to display it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/1c029e12983acd1547a7.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/0b76837911f386b4e84d.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/8fda144dac918648a67b.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;style&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/a19306e62382a80f9692.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/364a65052d6aaed82138.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;style&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;preload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/cbeb1be2886825385048.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/8fda144dac918648a67b.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_nuxt/364a65052d6aaed82138.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beyond accessibility however, there is an environmental cost to having a heavy
website. According to &lt;a href=&quot;https://www.websitecarbon.com/&quot;&gt;Wholegrain Digital&lt;/a&gt;,
every GB costs about &lt;a href=&quot;https://www.websitecarbon.com/how-does-it-work/&quot;&gt;1.8kW of electricity an
hour&lt;/a&gt;. If we do the math, that
means OCADU’s front page costs approximately 0.03533kWh for each un-cached
visitor. If we multiply that with the total number of students at OCADU it would
cost 214.52kWh for each student at OCAD to visit the index page once.&lt;/p&gt;

&lt;p&gt;So yeah, OCAD’s homepage sucks. It’s slow and bloated and kind of broken at
times. And it’s not just OCAD’s homepage that sucks. There are plenty of other
examples of web pages out there which are way heavier than they need to be. It’s
like an electronic epidemic. So if you ever design a website, please keep
performance at least somewhat in mind. Think about what is necessary for the
content. Adding too much to a web page will not only bog down/break a user’s
access, it’s also just straight up worse for the environment.&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Website" /><category term="Blog" /><category term="Web Design" /><category term="Rants" /><summary type="html">Despite what minimalist trends prevalent throughout the tech industries may have you believe, today’s modern web is very bloated. Just 5 years ago, the average web page was already larger than the original DOOM for MS-DOS. In reaction to this, I choose to design this blog to be as lightweight and easy to load as possible. I remember times back in High School where my computer could barely handle 3 or 4 tabs of Chrome or Firefox. It was awful. Since then, modern web browsers have implemented a plethora of new features and in turn have become potentially bigger resource hogs. And just as they do, designers While these features provide a lot of creative of power to web designers, it’s part of the designer’s job to wield these powers appropriately.</summary></entry><entry><title type="html">Thoughts on why I’m making a synthesizer</title><link href="http://0.0.0.0:4000/GRPH/audio/2021/11/16/why-im-making-a-synth.html" rel="alternate" type="text/html" title="Thoughts on why I’m making a synthesizer" /><published>2021-11-16T00:00:00-05:00</published><updated>2021-11-16T00:00:00-05:00</updated><id>http://0.0.0.0:4000/GRPH/audio/2021/11/16/why-im-making-a-synth</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/audio/2021/11/16/why-im-making-a-synth.html">&lt;p&gt;When it comes to actually writing music, I actually think I’m pretty awful. I spend so much time obsessing over tiny details and always have a hard time seeing the big picture of what I’m trying to do. Honestly, the reason why I’ve been so upset with my process of creation is due to this indecisiveness to move on from minute details. On top of that, I’m not the most mechanically gifted person in the world. Much like how I struggle with brushes and inks, I can barely play inversions on the piano.&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float &quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-sonic-pi-png&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/sonic-pi.png&quot; alt=&quot;Screenshot of Sonic Pi from Wikipedia&quot; style=&quot;width: 800px&quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Screenshot of Sonic Pi from Wikipedia&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-sonic-pi-png&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/sonic-pi.png&quot; alt=&quot;Screenshot of Sonic Pi from Wikipedia&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;When it came to design however, I always thought what gave me an edge is my ability to pull magic out of computers. While there was a lot I needed to learn at OCAD to feel even remotely competent with what I was doing, I always felt like I had this talent as a crux. I call it magic because I really think computers are magical. Here is this box. You can put whatever data in it you can think of and with just a little bit of a math you can shape that data into (&lt;a href=&quot;https://www.youtube.com/watch?v=macM_MtS_w4&quot;&gt;almost&lt;/a&gt;) any virtual form you want. If that’s not magic, I don’t know what is. I think that’s what attracted me to electronic music in the first place. I always wanted to make music. I just never had the patience to figure out how to physically play something.&lt;/p&gt;

&lt;p&gt;I remember when I first started playing with sound, I was using this program called &lt;a href=&quot;https://sonic-pi.net/&quot;&gt;Sonic Pi&lt;/a&gt; to make beats while on commutes. In retrospect, Sonic Pi is amazing and I really oughta pick it up again. It’s basically a music sequencing environment based around live coding. At the time however, I wasn’t really interested in the idea of live performance. While sequencing in Sonic Pi was awesome, it felt a bit limiting to be stuck with same set off instruments. While the option existed to load up custom instruments made in &lt;a href=&quot;https://supercollider.github.io/&quot;&gt;SuperCollider&lt;/a&gt;, at the time I found SuperCollider was a little beyond me. After a couple weeks I moved on to PureData hoping for something simple to learn that gave me better control of timbre.&lt;/p&gt;

&lt;p&gt;If anyone is to ever ask me what my favourite programming language is, my answer would probably be &lt;a href=&quot;https://puredata.info/&quot;&gt;PureData&lt;/a&gt;. Never in my life have I tried so hard to learn everything I could about a piece of software. When I first picked it up, I would spend weeks building simple samplers and shitty noise generators. I didn’t make any music out of it, but I felt like I was learning so much out of just playing around as awful as those sounds were. What amazed me was how sounds could be generated with such modularity. How everything and anything could be defined as a value and how that value can be generated in anyway you want.&lt;/p&gt;

&lt;!-- Include for Video Embedding --&gt;
&lt;!-- https://github.com/nathancy/jekyll-embed-video#responsive-videos --&gt;
&lt;div class=&quot;float&quot;&gt;
  &lt;figure class=&quot;embed video&quot;&gt;
    &lt;span class=&quot;video&quot;&gt;
      &lt;iframe style=&quot;width:100%; height:100%;&quot; src=&quot;https://player.vimeo.com/video/646396827?h=b0a124d5cc&amp;amp;badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;
      &lt;/iframe&gt;
    &lt;/span&gt;
    &lt;figcaption class=&quot;caption&quot;&gt;A Pd track I made a couple months ago&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Eventually I began dissecting other user patches to better understand how to build things like fancy oscillators and simple audio effects. This led me to start reading up and researching audio processing techniques. One particular resource I always mention that I found really useful is Miller Puckette’s &lt;a href=&quot;http://msp.ucsd.edu/techniques/v0.11/book-html/&quot;&gt;Theory and Techniques of Electronic Music&lt;/a&gt;. It features plenty of examples of various audio processing algorithms and is written by the guy who created Pd. I think part of me believed that by understanding these sound processes on a deeper level, I would unlock some sort of understanding of the kind of music I wanted to make. Obviously, this didn’t come true and I still have no idea what I’m doing. At multiple points however, I believed it enough to coax myself into attempting to build my own &lt;a href=&quot;https://en.wikipedia.org/wiki/Eurorack&quot;&gt;eurorack&lt;/a&gt;-style system for algorithmic music. Every time I tried though, my system would end up being overly complexed and too much of a hassle to play. On top of that, I often found Pd’s small selection of basic UI options to be quite limiting when trying to make something substantial.&lt;/p&gt;

&lt;p&gt;Ultimately, my experience with Pd is kind of what drives me to make this electronic instrument for my workshop project. Though I still I don’t really know much of anything about music (I don’t even know much about computers tbh), I do know how to make sounds using software. I haven’t decided on how I want the this instrument to play or look like just yet, but I’m hoping by shifting my focus a bit to a single tangible thing I can at least come up with something interesting and fun to play.&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Audio" /><category term="Music" /><category term="PureData" /><category term="Rants" /><summary type="html">When it comes to actually writing music, I actually think I’m pretty awful. I spend so much time obsessing over tiny details and always have a hard time seeing the big picture of what I’m trying to do. Honestly, the reason why I’ve been so upset with my process of creation is due to this indecisiveness to move on from minute details. On top of that, I’m not the most mechanically gifted person in the world. Much like how I struggle with brushes and inks, I can barely play inversions on the piano.</summary></entry><entry><title type="html">New Layout!</title><link href="http://0.0.0.0:4000/GRPH/website/2021/11/14/new-layout.html" rel="alternate" type="text/html" title="New Layout!" /><published>2021-11-14T00:00:00-05:00</published><updated>2021-11-14T00:00:00-05:00</updated><id>http://0.0.0.0:4000/GRPH/website/2021/11/14/new-layout</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/website/2021/11/14/new-layout.html">&lt;p&gt;Over the last couple days I’ve been kind of taking a break from programming the Bela in order to focus my attention on this blog. Despite aiming for a lightweight website, I made a few compromises by deciding to use javascript and webfonts for the sake of style. After testing the website on an &lt;a href=&quot;https://www.cnet.com/products/acer-aspire-one-d250/specs/&quot;&gt;old netbook&lt;/a&gt; however, I noticed that even having a minimal amount of scripting was a bit too much. On top of that, further testing showed that the typefaces imported by Google fonts accounted for the a majority of my sites digital weight.&lt;/p&gt;

&lt;h2 id=&quot;issues-with-the-old-layout&quot;&gt;Issues with the Old Layout&lt;/h2&gt;

&lt;p&gt;Prior to the re-design, the main thing I was using JS for was to show and hide my menu items. If you’re interested in how that works, the source code for the previous version of the site can be found &lt;a href=&quot;https://github.com/cheesoup/GRPH/tree/bf5ac20a3080064854d65529b38d4fbd6abc8bad&quot;&gt;here&lt;/a&gt; (thank God for git). The unfortunate thing with CSS and JS animations however is that they’re pretty CPU intensive. Whenever I would open the menu on the netbook, the fans would whirl and the CPU usage would shoot up to 97%.&lt;/p&gt;

&lt;p&gt;Other than the menu, I also implemented some JS for placing arbitrary text into someone’s copy and paste clipboard. I was mainly using to create hyperlinks which would give the user the URL to the RSS feed. Though the script does work pretty well, if JS is disabled for whatever reason it is impossible to access the RSS. Also I feel like using JS in this way was sort of lazy.&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float &quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-blog-size-0-png&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/blog_size_0.png&quot; alt=&quot;34.1kbs for webfonts&quot; style=&quot;width: &quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;34.1kbs for webfonts&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-blog-size-0-png&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/blog_size_0.png&quot; alt=&quot;34.1kbs for webfonts&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;After getting rid of all the javascript, I found a few &lt;a href=&quot;https://pagespeed.web.dev/&quot;&gt;online&lt;/a&gt; &lt;a href=&quot;https://tools.pingdom.com/&quot;&gt;tools&lt;/a&gt; for measuring how much data a webpage requests whenever it is loaded. As the results above show, webfonts had previously accounted for over 50% of the site’s bandwidth per visit which for me is obviously not cool. To remedy this, I stuck to &lt;a href=&quot;https://www.cssfontstack.com/&quot;&gt;web safe fonts&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;on-to-the-new&quot;&gt;On to the New&lt;/h2&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float right&quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#splash-gif&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images/splash.gif&quot; alt=&quot;Say hi!&quot; style=&quot;width: &quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;Say hi!&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;splash-gif&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images/splash.gif&quot; alt=&quot;Say hi!&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I’m pretty happy about is how small this website is. I’ve managed to get the about my main pages below &lt;a href=&quot;https://pagespeed.web.dev/report?url=https%3A%2F%2Fcheesoup.github.io%2FGRPH%2Fabout&quot;&gt;20kbs&lt;/a&gt;! I think that’s pretty impressive. There are actually still a few things I would like to implement (the main thing being a pure CSS lightbox for photos), but I think that’s a project for another day.&lt;/p&gt;

&lt;p&gt;Other than optimization, I had a couple goals in mind when working on the re-design. I have a process book coming up for Workshop and I figured starting here would be a good place for coming up with design ideas for the final printed version. I guess visually, I’m really trying to pull ideas from WEB 1.0. Part of me is nostalgic for the hours I would spend listening to the midi re-interpretations of Koji Kondo’s Dire Dire Docks or Alice Deejay’s Better Off Alone on Geocities.&lt;/p&gt;

&lt;p&gt;If you haven’t noticed, I’ve come up with a little mascot for this project. You can see them up in the top corner! They don’t quite have a name yet, but they’re my buddy and we’re gonna make synths together. They’re based off a friend of mine from Calgary who makes some pretty rad tunes and actually isn’t a crow (their last name just sounds like it).&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Website" /><category term="Blog" /><summary type="html">Over the last couple days I’ve been kind of taking a break from programming the Bela in order to focus my attention on this blog. Despite aiming for a lightweight website, I made a few compromises by deciding to use javascript and webfonts for the sake of style. After testing the website on an old netbook however, I noticed that even having a minimal amount of scripting was a bit too much. On top of that, further testing showed that the typefaces imported by Google fonts accounted for the a majority of my sites digital weight.</summary></entry><entry><title type="html">Coding on bela</title><link href="http://0.0.0.0:4000/GRPH/audio/2021/10/26/coding-on-bela.html" rel="alternate" type="text/html" title="Coding on bela" /><published>2021-10-26T00:00:00-04:00</published><updated>2021-10-26T00:00:00-04:00</updated><id>http://0.0.0.0:4000/GRPH/audio/2021/10/26/coding-on-bela</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/audio/2021/10/26/coding-on-bela.html">&lt;p&gt;&lt;del&gt;I finally managed to get sometime to do a bit a programming. It’s been alright so far. Most of my times been spent on figuring out how pointers work and just getting used to C++ in general. I managed to program this dithered polyBLEP sawtooth oscillator. It’s a bit late so I’ll edit this post later with some details on the code, but for now here it is in raw form.&lt;/del&gt;&lt;br /&gt;
&lt;strong&gt;[Oct.30th edit: OK LETS WRITE SOME STUFF]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ok so before I write about my code, I guess I should probably write about what Bela is and basic Bela programming. &lt;a href=&quot;https://www.bela.io&quot;&gt;Bela&lt;/a&gt; is a cape for the &lt;a href=&quot;https://beagleboard.org/black&quot;&gt;Beagle Bone Black&lt;/a&gt; single board computer. It specializes in audio processing for the purpose of creating audio effects, instruments, sound installations, whatever. It comes with 16 digital and analog IOs for interfacing with switches and potentiometers and stuff. It’s pretty rad.&lt;/p&gt;

&lt;h2 id=&quot;rendercpp&quot;&gt;render.cpp&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;Bela.h&amp;gt;
#include &amp;lt;cmath&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gFrequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;440.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gInverseSampleRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelaContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gInverseSampleRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioSampleRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelaContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioFrames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gFrequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gInverseSampleRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioOutChannels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;audioWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelaContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above is the basic example code shipped with Bela. It produces a sine wave signal at 440hz (middle A). Other than being based in C++ rather than Java, it’s surprisingly similar to Processing in terms of having a setup() function followed by some looping rendering function. The functions are given two arguments: a pointer to a BelaContext object, a pointer to a userData object. From what I assume/read online, these objects declared in the Bela.h header file and contain system data such as hardware and driver information.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;setup()&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelaContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gInverseSampleRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioSampleRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unlike Processing, Bela’s setup function returns a boolean. The render loop won’t start unless setup() returns true. In the example provided, the setup function initializes a few variables. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gInverseSampleRate&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 / samplerate&lt;/code&gt; and while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gPhase&lt;/code&gt; is initialized to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float &quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-sine-png&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/sine.png&quot; alt=&quot;A plot of a sine function with its phase normalized to 2π&quot; style=&quot;width: 800px&quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;A plot of a sine function with its phase normalized to 2π&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-sine-png&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/sine.png&quot; alt=&quot;A plot of a sine function with its phase normalized to 2π&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;When graphing a periodic (repeating) waveform statically like the image above, phase can be described as the current x-value (between 0-1) of the wave. As the x-value increments, the waveform’s y-value oscillates between -1 and 1. To apply this idea to audio, we have think of x as something that is constantly accumulating between 0-1. This is pretty much what Bela’s example code does.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelaContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioFrames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gFrequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gInverseSampleRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;gPhase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioOutChannels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;audioWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The amount to increment x is calculated by multiplying the given frequency by the inverse sample rate. This is equal to ` dx = freq / samplerate`. By controlling how much we increment the phase, we’re able to control the frequency at which the oscillator oscillates at. Something to keep in mind with this example however is that they normalize the phase to 2PI. This is because the normal phase length of a sine wave is 2PI.&lt;/p&gt;

&lt;h2 id=&quot;cleanup&quot;&gt;cleanup()&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelaContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This section doesn’t actually do anything. In C++, one is able to dynamically allocate memory. When doing so, memory needs to be deallocated to free it up again. Dynamic memory allocation isn’t used in this example however, thus nothing needs to be cleaned up. In scenarios where you do dynamically allocate memory, this is where you would deallocate the remainder of what needs to be deallocated.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And that’s all the example does! Hopefully this post wasn’t too wordy. If you’re interested in learning more about audio programming in C++, I’ve been following this &lt;a href=&quot;https://www.youtube.com/watch?v=aVLRUyPBBJk&quot;&gt;YouTube tutorial&lt;/a&gt;. I think it’s pretty useful even outside of a Bela context. I’m not quite sure how easy it is to follow for non-programmers and people not into signal processing however.&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Audio" /><category term="Bela" /><category term="Oscillators" /><summary type="html">I finally managed to get sometime to do a bit a programming. It’s been alright so far. Most of my times been spent on figuring out how pointers work and just getting used to C++ in general. I managed to program this dithered polyBLEP sawtooth oscillator. It’s a bit late so I’ll edit this post later with some details on the code, but for now here it is in raw form. [Oct.30th edit: OK LETS WRITE SOME STUFF]</summary></entry><entry><title type="html">Some Stuff about Github Pages</title><link href="http://0.0.0.0:4000/GRPH/website/2021/10/15/github-pages.html" rel="alternate" type="text/html" title="Some Stuff about Github Pages" /><published>2021-10-15T00:00:00-04:00</published><updated>2021-10-15T00:00:00-04:00</updated><id>http://0.0.0.0:4000/GRPH/website/2021/10/15/github-pages</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/website/2021/10/15/github-pages.html">&lt;p&gt;Debugging this site was a lot more of a pain in the ass than I thought it would be. After an extra day of website work, I finally managed to get my Github Pages to recognize my Jekyll source repository as a website. I feel like this should’ve been obvious how to do, but I’m actually pretty unfamiliar with the git protocol.&lt;/p&gt;

&lt;p&gt;Initially, I thought you were supposed to simply upload the preview site to your repo. However, after inspecting other people Jekyll repos, I noticed that they had their whole Jekyll project within the repository. This kinda baffled me, but when I tried it, low and behold my site showed up automatically. Unfortunately this wasn’t a perfect process. Uploading my site in such a way resulted in something going wrong with the tagging system.&lt;/p&gt;

&lt;p&gt;Apparently Github Pages doesn’t support the &lt;a href=&quot;https://github.com/pattex/jekyll-tagging&quot;&gt;Jekyll-Tagging&lt;/a&gt; plugin. It took me a while to figure this out and I was getting really annoyed about it. Ultimately, I had to look into some liquid code for building a tag clouds. Below are some pages I referenced while trying to fix this issue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;Setting up a GitHub Pages site with Jekyll&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://codinfox.github.io/dev/2015/03/06/use-tags-and-categories-in-your-jekyll-based-github-pages/&quot;&gt;CodinFox&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://superdevresources.com/tag-cloud-jekyll/&quot;&gt;superdevresources.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still need to get the RSS working. I don’t think it’s that important though&lt;/p&gt;

&lt;p&gt;EDIT: Nevermind, I added an RSS feed.&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Website" /><category term="Blog" /><summary type="html">Debugging this site was a lot more of a pain in the ass than I thought it would be. After an extra day of website work, I finally managed to get my Github Pages to recognize my Jekyll source repository as a website. I feel like this should’ve been obvious how to do, but I’m actually pretty unfamiliar with the git protocol.</summary></entry><entry><title type="html">FFT Spectral Granulator</title><link href="http://0.0.0.0:4000/GRPH/audio/2021/10/14/fft_grainspec.html" rel="alternate" type="text/html" title="FFT Spectral Granulator" /><published>2021-10-14T00:00:00-04:00</published><updated>2021-10-14T00:00:00-04:00</updated><id>http://0.0.0.0:4000/GRPH/audio/2021/10/14/fft_grainspec</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/audio/2021/10/14/fft_grainspec.html">&lt;p&gt;My main goal with this patch was to experiment with IFFT synthesis in context of a sample based granular synthesizers. It uses Miller Puckette’s &lt;a href=&quot;http://msp.ucsd.edu/techniques/latest/book-html/node182.html&quot;&gt;phase vocoder example&lt;/a&gt; in conjunction with Scott “Acriel” Nordlund’s example of &lt;a href=&quot;https://acreil.wordpress.com/2020/01/13/pure-data-frequency-domain-filtering-patch/&quot;&gt;frequency domain filtering&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Include for Video Embedding --&gt;
&lt;!-- https://github.com/nathancy/jekyll-embed-video#responsive-videos --&gt;
&lt;div class=&quot;float&quot;&gt;
  &lt;figure class=&quot;embed video&quot;&gt;
    &lt;span class=&quot;video&quot;&gt;
      &lt;iframe style=&quot;width:100%; height:100%;&quot; src=&quot;https://player.vimeo.com/video/645841010?h=b0a124d5cc&amp;amp;badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;
      &lt;/iframe&gt;
    &lt;/span&gt;
    &lt;figcaption class=&quot;caption&quot;&gt;Demo video of the Pd patch&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1Eh7-vdZ8O2aogQ6mitHBcSlV4N7GJCWh/view?usp=sharing&quot;&gt;Click here to Download&lt;/a&gt;&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Audio" /><category term="PureData" /><category term="Oscillators" /><summary type="html">My main goal with this patch was to experiment with IFFT synthesis in context of a sample based granular synthesizers. It uses Miller Puckette’s phase vocoder example in conjunction with Scott “Acriel” Nordlund’s example of frequency domain filtering.</summary></entry><entry><title type="html">vsnares</title><link href="http://0.0.0.0:4000/GRPH/misc/2021/10/14/vsnarez.html" rel="alternate" type="text/html" title="vsnares" /><published>2021-10-14T00:00:00-04:00</published><updated>2021-10-14T00:00:00-04:00</updated><id>http://0.0.0.0:4000/GRPH/misc/2021/10/14/vsnarez</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/misc/2021/10/14/vsnarez.html">&lt;p&gt;I just wanted to test posting YouTube videos. Here’s one featuring Mr. Funk and possibly John Frusciante.&lt;/p&gt;

&lt;!-- Include Video Embedding --&gt;
&lt;!-- https://github.com/nathancy/jekyll-embed-video#responsive-videos --&gt;
&lt;div class=&quot;float&quot;&gt;
  &lt;figure class=&quot;embed video&quot;&gt;
    &lt;span class=&quot;video&quot;&gt;
      &lt;iframe style=&quot;width:100%; height:100%;&quot; src=&quot;https://www.youtube.com/embed/3dEH7uhZ-ME&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;
      &lt;/iframe&gt;
    &lt;/span&gt;
    &lt;figcaption class=&quot;caption&quot;&gt;:)&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;</content><author><name>Chris Carin</name></author><category term="Misc" /><category term="Music" /><category term="Blog" /><summary type="html">I just wanted to test posting YouTube videos. Here’s one featuring Mr. Funk and possibly John Frusciante.</summary></entry><entry><title type="html">Hello World!</title><link href="http://0.0.0.0:4000/GRPH/misc/2021/10/13/hello-world!.html" rel="alternate" type="text/html" title="Hello World!" /><published>2021-10-13T00:00:00-04:00</published><updated>2021-10-13T00:00:00-04:00</updated><id>http://0.0.0.0:4000/GRPH/misc/2021/10/13/hello-world!</id><content type="html" xml:base="http://0.0.0.0:4000/GRPH/misc/2021/10/13/hello-world!.html">&lt;p&gt;Check it out!! It’s my first post!! How cool is that? Comin’ straight from the 647 to the 905 to the 416 etc. I don’t really have much to write about right now. So I guess I’ll just some small updates about what I’ve been up to.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://bela.io/&quot;&gt;Bela&lt;/a&gt; development board for my project finally came in. Above is a picture of it. The developers of the board describe it as “an open-source embedded computing platform for creating responsive, real-time interactive systems with audio and sensors”. In laymen terms, essentially it’s single-board computer (think Raspberry Pi) with a programmable cape which specializes in processing signals.&lt;/p&gt;

&lt;!-- Include for captioned images --&gt;
&lt;div class=&quot;float right&quot;&gt;
  &lt;figure class=&quot;embed picture&quot;&gt;
    &lt;a href=&quot;#content-bela0-jpg&quot;&gt;
      &lt;img src=&quot;/GRPH/assets/images//content/bela0.jpg&quot; alt=&quot;The bela board!&quot; style=&quot;width: 360px&quot; loading=&quot;lazy&quot; /&gt;
    &lt;/a&gt;
    &lt;figcaption&gt;The bela board!&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;a href=&quot;#/&quot; class=&quot;expand&quot; id=&quot;content-bela0-jpg&quot;&gt;
    &lt;img src=&quot;/GRPH/assets/images//content/bela0.jpg&quot; alt=&quot;The bela board!&quot; style=&quot;background-image: url(&apos;/GRPH/assets/images/transparent.gif&apos;)&quot; loading=&quot;lazy&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Originally, I was planning on programming the Bela board using PureData. After experimenting a little bit however, I think it might be a better idea to program it in C++. PD patches seem to be a bit heavier on the board in comparison. If I go with the latter route, I’ll probably stick to PD for prototyping signals paths and such.&lt;/p&gt;

&lt;p&gt;Other than experimenting with the board, I’ve mostly just been spending my time developing this blog. This blog is the first time I’ve used &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; for a project. It’s basically a static site generator that I really wanted try out. I’m still new to working with this kind of platform, so let me know if you run into any bugs/broken link.&lt;/p&gt;</content><author><name>Chris Carin</name></author><category term="Misc" /><category term="Blog" /><summary type="html">Check it out!! It’s my first post!! How cool is that? Comin’ straight from the 647 to the 905 to the 416 etc. I don’t really have much to write about right now. So I guess I’ll just some small updates about what I’ve been up to.</summary></entry></feed>